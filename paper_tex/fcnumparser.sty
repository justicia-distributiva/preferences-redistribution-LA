%\subsection{fcnumparser.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{fcnumparser}[2017/06/15]
%    \end{macrocode}
% \cs{fc@counter@parser} is just a shorthand to parse a number held in a counter.
%    \begin{macrocode}
\def\fc@counter@parser#1{%
  \expandafter\fc@number@parser\expandafter{\the#1.}%
}
%    \end{macrocode}
%    \begin{macrocode}
\newcount\fc@digit@counter

\def\fc@end@{\fc@end}
%    \end{macrocode}
% \DescribeMacro{\fc@number@analysis} First of all we need to separate the number between integer and fractional
% part. Number to be analysed is in `\texttt{\#1}'. Decimal separator may be . or , whichever first. At end of
% this macro, integer part goes to \cs{fc@integer@part} and fractional part goes to \cs{fc@fractional@part}.
%    \begin{macrocode}
\def\fc@number@analysis#1\fc@nil{%
%    \end{macrocode}
% First check for the presence of a decimal point in the number.
%    \begin{macrocode}
  \def\@tempb##1.##2\fc@nil{\def\fc@integer@part{##1}\def\@tempa{##2}}%
  \@tempb#1.\fc@end\fc@nil
  \ifx\@tempa\fc@end@
%    \end{macrocode}
% Here \cs{@tempa} is \cs{ifx}-equal to \cs{fc@end}, which means that the number does not contain any decimal
% point. So we do the same trick to search for a comma.
%    \begin{macrocode}
    \def\@tempb##1,##2\fc@nil{\def\fc@integer@part{##1}\def\@tempa{##2}}%
    \@tempb#1,\fc@end\fc@nil
    \ifx\@tempa\fc@end@
%    \end{macrocode}
% No comma either, so fractional part is set empty.
%    \begin{macrocode}
       \def\fc@fractional@part{}%
    \else
%    \end{macrocode}
% Comma has been found, so we just need to drop `\texttt{,}\cs{fc@end}' from the end of \cs{@tempa} to get the
% fractional part.
%    \begin{macrocode}
       \def\@tempb##1,\fc@end{\def\fc@fractional@part{##1}}%
       \expandafter\@tempb\@tempa
    \fi
  \else
%    \end{macrocode}
% Decimal point has been found, so we just need to drop `\texttt{.}\cs{fc@end}' from the end \cs{@tempa} to
% get the fractional part.
%    \begin{macrocode}
       \def\@tempb##1.\fc@end{\def\fc@fractional@part{##1}}%
       \expandafter\@tempb\@tempa
  \fi
}
%    \end{macrocode}
% \DescribeMacro{\fc@number@parser} Macro \cs{fc@number@parser} is the main engine to parse a number.  Argument
% `\#1' is input and contains the number to be parsed. At end of this macro, each digit is stored separately
% in a \cs{fc@digit@}\meta{$n$}, and macros \cs{fc@min@weight} and \cs{fc@max@weight} are set to the bounds
% for \meta{$n$}.
%    \begin{macrocode}
\def\fc@number@parser#1{%
%    \end{macrocode}
% First remove all the spaces in \texttt{\#1}, and place the result into \cs{@tempa}.
%    \begin{macrocode}
  \let\@tempa\@empty
  \def\@tempb##1##2\fc@nil{%
    \def\@tempc{##1}%
    \ifx\@tempc\space
    \else
      \expandafter\def\expandafter\@tempa\expandafter{\@tempa ##1}%
    \fi
    \def\@tempc{##2}%
    \ifx\@tempc\@empty
      \expandafter\@gobble
    \else
      \expandafter\@tempb
    \fi
    ##2\fc@nil
  }%
  \@tempb#1\fc@nil
%    \end{macrocode}
% Get the sign into \cs{fc@sign} and the unsigned number part into \cs{fc@number}.
%    \begin{macrocode}
  \def\@tempb##1##2\fc@nil{\def\fc@sign{##1}\def\fc@number{##2}}%
  \expandafter\@tempb\@tempa\fc@nil
  \expandafter\if\fc@sign+%
    \def\fc@sign@case{1}%
  \else
    \expandafter\if\fc@sign-%
      \def\fc@sign@case{2}%
    \else
      \def\fc@sign{}%
      \def\fc@sign@case{0}%
      \let\fc@number\@tempa
    \fi
  \fi
  \ifx\fc@number\@empty
    \PackageError{fcnumparser}{Invalid number}{Number must contain at least one non blank
      character after sign}%
  \fi
%    \end{macrocode}
% Now, split \cs{fc@number} into \cs{fc@integer@part} and \cs{fc@fractional@part}.
%    \begin{macrocode}
  \expandafter\fc@number@analysis\fc@number\fc@nil
%    \end{macrocode}
% Now, split \cs{fc@integer@part} into a sequence of \cs{fc@digit@}\meta{$n$} with \meta{$n$} ranging from
% \cs{fc@unit@weight} to \cs{fc@max@weight}. We will use macro \cs{fc@parse@integer@digits} for that, but that
% will place the digits into \cs{fc@digit@}\meta{$n$} with \meta{$n$} ranging from
% \(2\times\cs{fc@unit@weight}-\cs{fc@max@weight}\) upto \(\cs{fc@unit@weight}-1\).
%    \begin{macrocode}
  \expandafter\fc@digit@counter\fc@unit@weight
  \expandafter\fc@parse@integer@digits\fc@integer@part\fc@end\fc@nil
%    \end{macrocode}
% First we compute the weight of the most significant digit: after \cs{fc@parse@integer@digits},
% \cs{fc@digit@counter} is equal to \(\cs{fc@unit@weight} -\mathrm{mw} -1\) and we want to set
% \cs{fc@max@weight} to \(\cs{fc@unit@weight} +\mathrm{mw}\) so we do:
% \begin{equation*}
% \cs{fc@max@weight}\leftarrow (-\cs{fc@digit@counter}) + 2\times\cs{fc@unit@weight} -1
% \end{equation*}
%    \begin{macrocode}
  \fc@digit@counter -\fc@digit@counter
  \advance\fc@digit@counter by \fc@unit@weight
  \advance\fc@digit@counter by \fc@unit@weight
  \advance\fc@digit@counter by -1 %
  \edef\fc@max@weight{\the\fc@digit@counter}%
%    \end{macrocode}
% Now we loop for \(i = \cs{fc@unit@weight}\) to \cs{fc@max@weight} in order to copy all the digits from
% \cs{fc@digit@}\meta{\(i + \mathrm{offset}\)} to \cs{fc@digit@}\meta{\(i\)}. First we compute
% \(\mathrm{offset}\) into \cs{@tempi}.
%    \begin{macrocode}
  {%
    \count0 \fc@unit@weight\relax
    \count1 \fc@max@weight\relax
    \advance\count0 by -\count1 %
    \advance\count0 by -1 %
    \def\@tempa##1{\def\@tempb{\def\@tempi{##1}}}%
    \expandafter\@tempa\expandafter{\the\count0}%
    \expandafter
  }\@tempb
%    \end{macrocode}
% Now we loop to copy the digits. To do that we define a macro \cs{@templ} for terminal recursion.
%    \begin{macrocode}
  \expandafter\fc@digit@counter\fc@unit@weight
  \def\@templ{%
     \ifnum\fc@digit@counter>\fc@max@weight
        \let\next\relax
     \else
%    \end{macrocode}
% Here is the loop body:
%    \begin{macrocode}
        {%
          \count0 \@tempi
          \advance\count0 by \fc@digit@counter
          \expandafter\def\expandafter\@tempd\expandafter{\csname fc@digit@\the\count0\endcsname}%
          \expandafter\def\expandafter\@tempe\expandafter{\csname fc@digit@\the\fc@digit@counter\endcsname}%
          \def\@tempa####1####2{\def\@tempb{\let####1####2}}%
          \expandafter\expandafter\expandafter\@tempa\expandafter\@tempe\@tempd
          \expandafter
        }\@tempb
        \advance\fc@digit@counter by 1 %
     \fi
     \next
  }%
  \let\next\@templ
  \@templ
%    \end{macrocode}
% Split \cs{fc@fractional@part} into a sequence of \cs{fc@digit@}\meta{$n$} with \meta{$n$} ranging from
% \(\cs{fc@unit@weight}-1\) to \cs{fc@min@weight} by step of \(-1\). This is much more simpler because we get
% the digits with the final range of index, so no post-processing loop is needed.
%    \begin{macrocode}
  \expandafter\fc@digit@counter\fc@unit@weight
  \expandafter\fc@parse@integer@digits\fc@fractional@part\fc@end\fc@nil
  \edef\fc@min@weight{\the\fc@digit@counter}%
}
%    \end{macrocode}
% \DescribeMacro{\fc@parse@integer@digits} Macro \cs{fc@parse@integer@digits} is used to 
%    \begin{macrocode}
\ifcsundef{fc@parse@integer@digits}{}{%
  \PackageError{fcnumparser}{Duplicate definition}{Redefinition of 
    macro `fc@parse@integer@digits'}}
\def\fc@parse@integer@digits#1#2\fc@nil{%
  \def\@tempa{#1}%
  \ifx\@tempa\fc@end@
     \def\next##1\fc@nil{}%
  \else
  \let\next\fc@parse@integer@digits
  \advance\fc@digit@counter by -1
  \expandafter\def\csname fc@digit@\the\fc@digit@counter\endcsname{#1}%
  \fi
  \next#2\fc@nil
}


\newcommand*{\fc@unit@weight}{0}

%    \end{macrocode}
% Now we have macros to read a few digits from the \cs{fc@digit@}\meta{$n$} array and form a correspoding
% number.\newline \DescribeMacro{\fc@read@unit} \cs{fc@read@unit} just reads one digit and form an integer in
% the range \([0 \intv 9]\). First we check that the macro is not yet defined.
%    \begin{macrocode}
\ifcsundef{fc@read@unit}{}{%
  \PackageError{fcnumparser}{Duplicate definition}{Redefinition of macro `fc@read@unit'}}
%    \end{macrocode}
% Arguments as follows:\def\interface{\newline\noindent
% \begin{tabularx}{\linewidth}{@{}>{\raggedleft\arraybackslash\ttfamily}rX@{}}
% \#1&output counter: into which the read value is placed\\
% \#2&input number: unit weight at which reach the value is to be read
% \end{tabularx}}\interface
% \#2 does not need to be comprised between \cs{fc@min@weight} and {fc@min@weight}, if outside this interval,
% then a zero is read.
%    \begin{macrocode}
\def\fc@read@unit#1#2{%
  \ifnum#2>\fc@max@weight
     #1=0\relax
  \else
     \ifnum#2<\fc@min@weight
        #1=0\relax
     \else
         {%
           \edef\@tempa{\number#2}%
           \count0=\@tempa
           \edef\@tempa{\csname fc@digit@\the\count0\endcsname}%
           \def\@tempb##1{\def\@tempa{#1=##1\relax}}%
           \expandafter\@tempb\expandafter{\@tempa}%
           \expandafter
         }\@tempa
     \fi
  \fi
}
%    \end{macrocode}
% \DescribeMacro{\fc@read@hundred} Macro \cs{fc@read@hundred} is used to read a pair of digits and form an
% integer in the range \([0 \intv 99]\).  First we check that the macro is not yet defined.
%    \begin{macrocode}
\ifcsundef{fc@read@hundred}{}{%
  \PackageError{fcnumparser}{Duplicate definition}{Redefinition of macro `fc@read@hundred'}}
%    \end{macrocode}
% Arguments as follows --- same interface as \cs{fc@read@unit}:\interface
%    \begin{macrocode}
\def\fc@read@hundred#1#2{%
  {%
    \fc@read@unit{\count0}{#2}%
    \def\@tempa##1{\fc@read@unit{\count1}{##1}}%
    \count2=#2%
    \advance\count2 by 1 %
    \expandafter\@tempa{\the\count2}%
    \multiply\count1 by 10 %
    \advance\count1 by \count0 %
    \def\@tempa##1{\def\@tempb{#1=##1\relax}}
    \expandafter\@tempa\expandafter{\the\count1}%
    \expandafter
  }\@tempb
}
%    \end{macrocode}
% \DescribeMacro{\fc@read@thousand} Macro \cs{fc@read@thousand} is used to read a trio of digits and form an
% integer in the range \([0 \intv 999]\).  First we check that the macro is not yet defined.
%    \begin{macrocode}
\ifcsundef{fc@read@thousand}{}{%
  \PackageError{fcnumparser}{Duplicate definition}{Redefinition of macro
    `fc@read@thousand'}}
%    \end{macrocode}
% Arguments as follows --- same interface as \cs{fc@read@unit}:\interface
%    \begin{macrocode}
\def\fc@read@thousand#1#2{%
  {%
    \fc@read@unit{\count0}{#2}%
    \def\@tempa##1{\fc@read@hundred{\count1}{##1}}%
    \count2=#2%
    \advance\count2 by 1 %
    \expandafter\@tempa{\the\count2}%
    \multiply\count1 by 10 %
    \advance\count1 by \count0 %
    \def\@tempa##1{\def\@tempb{#1=##1\relax}}
    \expandafter\@tempa\expandafter{\the\count1}%
    \expandafter
  }\@tempb
}
%    \end{macrocode}
% Note: one myriad is ten thousand.
% \DescribeMacro{\fc@read@thousand} Macro \cs{fc@read@myriad} is used to read a quatuor of digits and form an
% integer in the range \([0 \intv 9999]\).  First we check that the macro is not yet defined.
%    \begin{macrocode}
\ifcsundef{fc@read@myriad}{}{%
  \PackageError{fcnumparser}{Duplicate definition}{Redefinition of macro
    `fc@read@myriad'}}
%    \end{macrocode}
% Arguments as follows --- same interface as \cs{fc@read@unit}:\interface
%    \begin{macrocode}
\def\fc@read@myriad#1#2{%
  {%
    \fc@read@hundred{\count0}{#2}%
    \def\@tempa##1{\fc@read@hundred{\count1}{##1}}%
    \count2=#2
    \advance\count2 by 2
    \expandafter\@tempa{\the\count2}%
    \multiply\count1 by 100 %
    \advance\count1 by \count0 %
    \def\@tempa##1{\def\@tempb{#1=##1\relax}}%
    \expandafter\@tempa\expandafter{\the\count1}%
    \expandafter
  }\@tempb
}
%    \end{macrocode}
% \DescribeMacro{\fc@check@nonzeros} Macro \cs{fc@check@nonzeros} is used to check whether the number
% represented by digits \cs{fc@digit@}\meta{$n$}, with \(n\) in some interval, is zero, one, or more than one.
% First we check that the macro is not yet defined.
%    \begin{macrocode}
\ifcsundef{fc@check@nonzeros}{}{%
  \PackageError{fcnumparser}{Duplicate definition}{Redefinition of macro
    `fc@check@nonzeros'}}
%    \end{macrocode}
% Arguments as follows:\newline\noindent
% \begin{tabularx}{\linewidth}{@{}>{\raggedleft\arraybackslash\ttfamily}rX@{}}
%   \#1&input number: minimum unit unit weight at which start to search the non-zeros\\
%   \#2&input number: maximum unit weight at which end to seach the non-zeros\\
%   \#3&output macro: let \(n\) be the number represented by digits the weight of which span from \texttt{\#1}
%   to \texttt{\#2}, then \texttt{\#3} is set to the number min(n,9).\\
% \end{tabularx}
% Actually \cs{fc@check@nonzeros} is just a wrapper to collect arguments, and the real job is delegated to
% \cs{fc@@check@nonzeros@inner} which is called inside a group. 
%    \begin{macrocode}
\def\fc@check@nonzeros#1#2#3{%
  {%
%    \end{macrocode}
% So first we save inputs into local macros used by \cs{fc@@check@nonzeros@inner} as input arguments
%    \begin{macrocode}
    \edef\@@tempa{\number#1}%
    \edef\@tempb{\number#2}%
    \count0=\@@tempa
    \count1=\@tempb\relax
%    \end{macrocode}
% Then we do the real job
%    \begin{macrocode}
   \fc@@check@nonzeros@inner
%    \end{macrocode}
% And finally, we propagate the output after end of group --- i.e. closing brace.
%    \begin{macrocode}
   \def\@tempd##1{\def\@tempa{\def#3{##1}}}%
   \expandafter\@tempd\expandafter{\@tempc}%
   \expandafter
  }\@tempa
}
%    \end{macrocode}
% \DescribeMacro{\fc@@check@nonzeros@inner} Macro \cs{fc@@check@nonzeros@inner} Check wehther some part of the
% parsed value contains some non-zero digit At the call of this macro we expect that:\newline\noindent
% \begin{tabularx}{\linewidth}{@{}>{\raggedleft\arraybackslash}rX@{}}
%   \cs{@tempa}&input/output macro:\newline\noindent
%   \settowidth{\tabcolwidth}{output}%
%   \begin{tabular*}{\hsize}{@{}>{\raggedleft\arraybackslash\itshape}r%
%     p{\dimexpr\hsize-2\tabcolsep-\tabcolwidth}@{}}
%     input&minimum unit unit weight at which start to search the non-zeros\\
%     output&macro may have been redefined
%   \end{tabular*}\\
%   \cs{@tempb}&input/output macro:\newline\noindent
%   \settowidth{\tabcolwidth}{output}%
%   \begin{tabular*}{\hsize}{@{}>{\raggedleft\arraybackslash\itshape}r%
%     p{\dimexpr\hsize-2\tabcolsep-\tabcolwidth}@{}}
% input&maximum unit weight at which end to seach the non-zeros\\
% output&macro may have been redefined
% \end{tabular*}\\
% \cs{@tempc}&ouput macro: 0 if all-zeros, 1 if at least one zero is found\\
% \cs{count0}&output counter: \(\mathrm{weight}+1\) of the first found non zero starting from minimum
% \(\mathrm{weight}\).
% \end{tabularx}
%    \begin{macrocode}
\def\fc@@check@nonzeros@inner{%
   \ifnum\count0<\fc@min@weight
      \count0=\fc@min@weight\relax
   \fi
   \ifnum\count1>\fc@max@weight\relax
      \count1=\fc@max@weight
   \fi
   \count2\count0 %
   \advance\count2 by 1 %
   \ifnum\count0>\count1 %
     \PackageError{fcnumparser}{Unexpected arguments}{Number in argument 2 of macro
       `fc@check@nonzeros' must be at least equal to number in argument 1}%
   \else
     \fc@@check@nonzeros@inner@loopbody
     \ifnum\@tempc>0 %
       \ifnum\@tempc<9 %
         \ifnum\count0>\count1 %
         \else
           \let\@tempd\@tempc
           \fc@@check@nonzeros@inner@loopbody
           \ifnum\@tempc=0 %
             \let\@tempc\@tempd
           \else
             \def\@tempc{9}%
           \fi
         \fi
       \fi
     \fi
   \fi
}
%    \end{macrocode}
%    \begin{macrocode}
\def\fc@@check@nonzeros@inner@loopbody{%
   % \@tempc <-  digit of weight \count0
   \expandafter\let\expandafter\@tempc\csname fc@digit@\the\count0\endcsname
   \advance\count0 by 1 %
   \ifnum\@tempc=0 %
      \ifnum\count0>\count1 %
        \let\next\relax
      \else
        \let\next\fc@@check@nonzeros@inner@loopbody
      \fi
   \else
      \ifnum\count0>\count2 %
        \def\@tempc{9}%
      \fi
      \let\next\relax
   \fi
   \next
}
%    \end{macrocode}
% \DescribeMacro{\fc@intpart@find@last} Macro \cs{fc@intpart@find@last} find the rightmost non zero digit in the
% integer part. First check that the macro is not yet defined.
%    \begin{macrocode}
\ifcsundef{fc@intpart@find@last}{}{%
  \PackageError{fcnumparser}{Duplicate definition}{Redefinition of macro
    `fc@intpart@find@last'}}
%    \end{macrocode}
% When macro is called, the number of interest is already parsed, that is to say each digit of weight \(w\) is
% stored in macro \cs{fc@digit@}\meta{$w$}.  Macro \cs{fc@intpart@find@last} takes one single argument which
% is a counter to set to the result.
%    \begin{macrocode}
\def\fc@intpart@find@last#1{%
  {%
%    \end{macrocode}
% Counter \cs{count0} will hold the result. So we will loop on \cs{count0}, starting from
% \(\min\{u,w_{\mathrm{min}}\}\), where \(u\triangleq\cs{fc@unit@weight}\), and
% \(w_{\mathrm{min}}\triangleq\cs{fc@min@weight}\). So first set \cs{count0} to
% \(\min\{u,w_{\mathrm{min}}\}\):
%    \begin{macrocode}
    \count0=\fc@unit@weight\space
    \ifnum\count0<\fc@min@weight\space
      \count0=\fc@min@weight\space
    \fi
%    \end{macrocode}
% Now the loop. This is done by defining macro \cs{@templ} for final recursion.
%    \begin{macrocode}
    \def\@templ{%
      \ifnum\csname fc@digit@\the\count0\endcsname=0 %
        \advance\count0 by 1 %
        \ifnum\count0>\fc@max@weight\space
          \let\next\relax
        \fi
      \else
        \let\next\relax
      \fi
      \next
    }%
    \let\next\@templ
    \@templ
%    \end{macrocode}
% Now propagate result after closing bracket into counter \texttt{\#1}.
%    \begin{macrocode}
     \toks0{#1}%
     \edef\@tempa{\the\toks0=\the\count0}%
     \expandafter
  }\@tempa\space
}
%    \end{macrocode}
% \DescribeMacro{\fc@get@last@word} Getting last word. Arguments as follows:\newline\noindent
% \begin{tabularx}{\linewidth}{@{}>{\raggedleft\arraybackslash\ttfamily}rX@{}}
%   \#1&input: full sequence\\
%   \#2&output macro 1: all sequence without last word\\
%   \#3&output macro 2: last word\\
% \end{tabularx}
%    \begin{macrocode}
\ifcsundef{fc@get@last@word}{}{\PackageError{fcnumparser}{Duplicate definition}{Redefinition 
    of macro `fc@get@last@word'}}%
\def\fc@get@last@word#1#2#3{%
  {%
%    \end{macrocode}
% First we split \texttt{\#1} into two parts: everything that is upto \cs{fc@wcase} exclusive goes to
% \cs{toks0}, and evrything from \cs{fc@wcase} exclusive upto the final \cs{@nil} exclusive goes to \cs{toks1}.
%    \begin{macrocode}
    \def\@tempa##1\fc@wcase##2\@nil\fc@end{%
      \toks0{##1}%
%    \end{macrocode}
% Actually a dummy \cs{fc@wcase} is appended to \cs{toks1}, because that makes easier further checking that it
% does not contains any other \cs{fc@wcase}.
%    \begin{macrocode}
      \toks1{##2\fc@wcase}%
    }%
    \@tempa#1\fc@end
%    \end{macrocode}
% Now leading part upto last word should be in \cs{toks0}, and last word should be in \cs{toks1}. However we
% need to check that this is really the last word, i.e. we need to check that there is no \cs{fc@wcase} inside
% \cs{toks1} other than the tailing dummy one. To that purpose we will loop while we find that \cs{toks1}
% contains some \cs{fc@wcase}. First we define \cs{@tempa} to split \cs{the}\cs{toks1} between parts before and
% after some potential \cs{fc@wcase}.
%    \begin{macrocode}
    \def\@tempa##1\fc@wcase##2\fc@end{%
      \toks2{##1}%
      \def\@tempb{##2}%
      \toks3{##2}%
    }%
%    \end{macrocode}
% \cs{@tempt} is just an aliases of \cs{toks0} to make its handling easier later on.
%    \begin{macrocode}
    \toksdef\@tempt0 %
%    \end{macrocode}
% Now the loop itself, this is done by terminal recursion with macro \cs{@templ}.
%    \begin{macrocode}
    \def\@templ{%
      \expandafter\@tempa\the\toks1 \fc@end
      \ifx\@tempb\@empty
%    \end{macrocode}
% \cs{@tempb} empty means that the only \cs{fc@wcase} found in \cs{the}\cs{toks1} is the dummy one. So we end
% the loop here, \cs{toks2} contains the last word.
%    \begin{macrocode}
        \let\next\relax
      \else
%    \end{macrocode}
% \cs{@tempb} is not empty, first we use 
%    \begin{macrocode}
         \expandafter\expandafter\expandafter\@tempt
         \expandafter\expandafter\expandafter{%
           \expandafter\the\expandafter\@tempt
           \expandafter\fc@wcase\the\toks2}%
         \toks1\toks3 %
      \fi
      \next
    }%
    \let\next\@templ
    \@templ
    \edef\@tempa{\def\noexpand#2{\the\toks0}\def\noexpand#3{\the\toks2}}%
    \expandafter
  }\@tempa
}
%    \end{macrocode}
% \DescribeMacro{\fc@get@last@word} Getting last letter. Arguments as follows:\newline\noindent
% \begin{tabularx}{\linewidth}{@{}>{\raggedleft\arraybackslash\ttfamily}rX@{}}
%   \#1&input: full word\\
%   \#2&output macro 1: all word without last letter\\
%   \#3&output macro 2: last letter\\
% \end{tabularx}
%    \begin{macrocode}
\ifcsundef{fc@get@last@letter}{}{\PackageError{fcnumparser}{Duplicate definition}{Redefinition 
    of macro `fc@get@last@letter'}}%
\def\fc@get@last@letter#1#2#3{%
  {%
%    \end{macrocode}
% First copy input to local \cs{toks1}. What we are going to to is to bubble one by one letters from
% \cs{toks1} which initial contains the whole word, into \cs{toks0}. At the end of the macro \cs{toks0} will
% therefore contain the whole work but the last letter, and the last letter will be in \cs{toks1}.
%    \begin{macrocode}
    \toks1{#1}%
    \toks0{}%
    \toksdef\@tempt0 %
%    \end{macrocode}
% We define \cs{@tempa} in order to pop the first letter from the remaining of word.
%    \begin{macrocode}
    \def\@tempa##1##2\fc@nil{%
      \toks2{##1}%
      \toks3{##2}%
      \def\@tempb{##2}%
    }%
%    \end{macrocode}
% Now we define \cs{@templ} to do the loop by terminal recursion.
%    \begin{macrocode}
    \def\@templ{%
      \expandafter\@tempa\the\toks1 \fc@nil
      \ifx\@tempb\@empty
%    \end{macrocode}
% Stop loop, as \cs{toks1} has been detected to be one single letter.
%    \begin{macrocode}
        \let\next\relax
      \else
%    \end{macrocode}
% Here we append to \cs{toks0} the content of \cs{toks2}, i.e. the next letter.
%    \begin{macrocode}
         \expandafter\expandafter\expandafter\@tempt
         \expandafter\expandafter\expandafter{%
           \expandafter\the\expandafter\@tempt
           \the\toks2}%
%    \end{macrocode}
% And the remaining letters go to \cs{toks1} for the next iteration.
%    \begin{macrocode}
        \toks1\toks3 %
      \fi
      \next
    }%
%    \end{macrocode}
% Here run the loop.
%    \begin{macrocode}
    \let\next\@templ
    \next
%    \end{macrocode}
% Now propagate the results into macros \texttt{\#2} and \texttt{\#3} after closing brace.
%    \begin{macrocode}
    \edef\@tempa{\def\noexpand#2{\the\toks0}\def\noexpand#3{\the\toks1}}%
    \expandafter
  }\@tempa
}%
%    \end{macrocode}
\iffalse Local variables: \fi
\iffalse mode: docTeX     \fi
\iffalse End:             \fi
